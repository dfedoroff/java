package interfaces;

import models.User;

import java.util.List;

/**
 * Интерфейс для взаимодействия с базой данных пользователей.
 * Предоставляет методы для создания, чтения, обновления и удаления записей пользователей.
 */
public interface UserDatabaseInterface {

    /**
     * Создает нового пользователя в базе данных.
     *
     * @param userName    Имя пользователя, которое должно быть уникальным.
     * @param passwordHash Хеш пароля пользователя.
     * @param cardNumber   Номер карты пользователя.
     * @return Идентификатор созданного пользователя.
     */
    int create(String userName, int passwordHash, long cardNumber);

    /**
     * Читает информацию о пользователе по его идентификатору.
     * Этот метод используется только для тестирования и не используется в приложении.
     *
     * @param id Идентификатор пользователя.
     * @return Объект пользователя или null, если пользователь с таким идентификатором не найден.
     */
    User read(int id);

    /**
     * Читает информацию о пользователе по его имени.
     *
     * @param userName Имя пользователя.
     * @return Объект пользователя или null, если пользователь с таким именем не найден.
     */
    User read(String userName);

    /**
     * Читает информацию обо всех пользователях в базе данных.
     * Этот метод используется только для тестирования и не используется в приложении.
     *
     * @return Список всех пользователей.
     */
    List<User> readAll();

    /**
     * Обновляет информацию о пользователе в базе данных.
     * Этот метод используется только для тестирования и не используется в приложении.
     *
     * @param client Объект пользователя с обновленной информацией.
     * @return true, если обновление прошло успешно, и false в противном случае.
     */
    boolean update(User client);

    /**
     * Удаляет пользователя из базы данных.
     * Этот метод используется только для тестирования и не используется в приложении.
     *
     * @param client Объект пользователя, который нужно удалить.
     * @return true, если удаление прошло успешно, и false в противном случае.
     */
    boolean delete(User client);
}
